{"ast":null,"code":"import { registerFailed, registerStart, registerSuccess, loginFailed, loginStart, loginSuccess, logoutStart, logoutSuccess, logoutFailed, updateStart, updateSuccess, updateFailed } from \"../redux/authSlice\";\nimport * as httpRequest from \"../utils/httpRequest\";\nexport const register = async (email, name, password, dispatch) => {\n  dispatch(registerStart());\n  try {\n    const res = await httpRequest.post('user/auth/register', {\n      email,\n      name,\n      password\n    });\n    dispatch(registerSuccess(res));\n  } catch (error) {\n    dispatch(registerFailed());\n  }\n};\nexport const login = async (email, password, dispatch) => {\n  dispatch(loginStart());\n  try {\n    const res = await httpRequest.post('user/auth/login', {\n      email,\n      password\n    });\n    dispatch(loginSuccess(res));\n  } catch (error) {\n    dispatch(loginFailed());\n  }\n};\nexport const logout = async (dispatch, token) => {\n  dispatch(logoutStart());\n  try {\n    const res = await httpRequest.post('user/auth/logout', {\n      token\n    });\n    dispatch(logoutSuccess(res));\n  } catch (error) {\n    dispatch(logoutFailed());\n  }\n};\nexport const updateUser = async (axiosJWT, user, accessToken, dispatch, id) => {\n  dispatch(updateStart());\n  try {\n    const res = await axiosJWT.put(`user/auth/${id}`, {\n      ...user\n    }, {\n      headers: {\n        token: `Bearer ${accessToken}`\n      }\n    });\n    console.log(res.data);\n    dispatch(updateSuccess(res.data));\n  } catch (error) {\n    dispatch(updateFailed());\n  }\n};\nexport const changePassword = async (axiosJWT, data, accessToken, id) => {\n  try {\n    const res = await axiosJWT.put(`user/auth/changePassword/${id}`, {\n      ...data\n    }, {\n      headers: {\n        token: `Bearer ${accessToken}`\n      }\n    });\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const forgotPassword = async email => {\n  try {\n    const res = await httpRequest.post('user/auth/forgot-password', {\n      email\n    });\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const resetPassword = async (newPassword, token) => {\n  try {\n    const res = await httpRequest.patch('user/auth/reset-password', {\n      newPassword,\n      token\n    });\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["registerFailed","registerStart","registerSuccess","loginFailed","loginStart","loginSuccess","logoutStart","logoutSuccess","logoutFailed","updateStart","updateSuccess","updateFailed","httpRequest","register","email","name","password","dispatch","res","post","error","login","logout","token","updateUser","axiosJWT","user","accessToken","id","put","headers","console","log","data","changePassword","forgotPassword","resetPassword","newPassword","patch"],"sources":["/Users/luuduylinh/Desktop/PhoneStore/src/services/authService.js"],"sourcesContent":["import {\n    registerFailed,\n    registerStart,\n    registerSuccess,\n    loginFailed,\n    loginStart,\n    loginSuccess,\n    logoutStart,\n    logoutSuccess,\n    logoutFailed,\n    updateStart,\n    updateSuccess,\n    updateFailed,\n} from '~/redux/authSlice';\nimport * as httpRequest from '~/utils/httpRequest';\n\nexport const register = async (email, name, password, dispatch) => {\n    dispatch(registerStart());\n    try {\n        const res = await httpRequest.post('user/auth/register', { email, name, password });\n        dispatch(registerSuccess(res));\n    } catch (error) {\n        dispatch(registerFailed());\n    }\n};\n\nexport const login = async (email, password, dispatch) => {\n    dispatch(loginStart());\n    try {\n        const res = await httpRequest.post('user/auth/login', { email, password });\n        dispatch(loginSuccess(res));\n    } catch (error) {\n        dispatch(loginFailed());\n    }\n};\n\nexport const logout = async (dispatch, token) => {\n    dispatch(logoutStart());\n    try {\n        const res = await httpRequest.post('user/auth/logout', { token });\n        dispatch(logoutSuccess(res));\n    } catch (error) {\n        dispatch(logoutFailed());\n    }\n};\n\nexport const updateUser = async (axiosJWT, user, accessToken, dispatch, id) => {\n    dispatch(updateStart());\n    try {\n        const res = await axiosJWT.put(\n            `user/auth/${id}`,\n            { ...user },\n            {\n                headers: { token: `Bearer ${accessToken}` },\n            },\n        );\n        console.log(res.data);\n        dispatch(updateSuccess(res.data));\n    } catch (error) {\n        dispatch(updateFailed());\n    }\n};\n\nexport const changePassword = async (axiosJWT, data, accessToken, id) => {\n    try {\n        const res = await axiosJWT.put(\n            `user/auth/changePassword/${id}`,\n            { ...data },\n            {\n                headers: { token: `Bearer ${accessToken}` },\n            },\n        );\n        return res.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const forgotPassword = async (email) => {\n    try {\n        const res = await httpRequest.post('user/auth/forgot-password', { email });\n        return res;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const resetPassword = async (newPassword, token) => {\n    try {\n        const res = await httpRequest.patch('user/auth/reset-password', { newPassword, token });\n        return res;\n    } catch (error) {\n        console.log(error);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}